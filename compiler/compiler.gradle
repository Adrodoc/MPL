apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'

archivesBaseName = 'mpl-compiler'

File antlrDefDir = file('src/antlr/def')
File antlrGenDir = file('src/antlr/gen')

// ----------------------------------------------------------------------------------------------------
//    ____                                    ____         _
//   / ___|   ___   _   _  _ __  ___  ___    / ___|   ___ | |_  ___
//   \___ \  / _ \ | | | || '__|/ __|/ _ \   \___ \  / _ \| __|/ __|
//    ___) || (_) || |_| || |  | (__|  __/    ___) ||  __/| |_ \__ \
//   |____/  \___/  \__,_||_|   \___|\___|   |____/  \___| \__||___/
//
// ----------------------------------------------------------------------------------------------------

sourceSets {
  main {
    java.srcDir antlrGenDir
    resources.srcDir antlrDefDir
  }
  jdotsoft
}

// ----------------------------------------------------------------------------------------------------
//    ____                                 _                     _
//   |  _ \   ___  _ __    ___  _ __    __| |  ___  _ __    ___ (_)  ___  ___
//   | | | | / _ \| '_ \  / _ \| '_ \  / _` | / _ \| '_ \  / __|| | / _ \/ __|
//   | |_| ||  __/| |_) ||  __/| | | || (_| ||  __/| | | || (__ | ||  __/\__ \
//   |____/  \___|| .__/  \___||_| |_| \__,_| \___||_| |_| \___||_| \___||___/
//                |_|
// ----------------------------------------------------------------------------------------------------

apply from: rootProject.file('snippets/annotation-processing.gradle')

configurations {
  antlr4
}

dependencies {
  annotationProccessing libs.pojobuilder

  antlr4 libs.antlr4

  compile sourceSets.jdotsoft.output
  compile libs.antlr4_runtime
  compile libs.guava
  compile libs.jcommander
  compile libs.jsr305
  compile libs.nbt
  compileOnly libs.lombok

  testCompile libs.assertj
  testCompile libs.junit
  testCompile libs.spock
}

// ----------------------------------------------------------------------------------------------------
//       _            _    _
//      / \    _ __  | |_ | | _ __
//     / _ \  | '_ \ | __|| || '__|
//    / ___ \ | | | || |_ | || |
//   /_/   \_\|_| |_| \__||_||_|
//
// ----------------------------------------------------------------------------------------------------

task cleanAntlr4 << {
  delete antlrGenDir
  mkdir antlrGenDir
}

task generateAntlr4 {
  description = 'Generates Java sources from ANTLR4 grammars.'

  doLast {
    fileTree(dir: antlrDefDir, include:'**/*.g4').each { File file ->
      String relativePathToGrammar = antlrDefDir.toURI().relativize( file.getParentFile().toURI() ).toString()
      String packageName = relativePathToGrammar.replaceFirst('/$', '').replace('/', '.')
      logger.lifecycle "  Generating grammar sources for ${file.name} in package ${packageName}"

      File grammarDestDir = new File(antlrGenDir, relativePathToGrammar)
      mkdir grammarDestDir
      javaexec {
        classpath configurations.antlr4
        main = 'org.antlr.v4.Tool'
        args = ["-o", grammarDestDir, "-package", packageName, "-visitor", // ggf. Konfig auch fÃ¼r Listener (suche Listener)
          "${file.canonicalPath}"]
      }
    }
  }
}
generateAntlr4.dependsOn cleanAntlr4
compileJava.dependsOn generateAntlr4
eclipseClasspath.dependsOn generateAntlr4

eclipse {
  classpath {
    file {
      whenMerged { cp ->
        def folder = cp.entries.find { it.path == 'src/antlr/gen' }
        folder.entryAttributes << ['ignore_optional_problems': true]
      }
    }
  }
}

// ----------------------------------------------------------------------------------------------------
//        _
//       | |  __ _  _ __
//    _  | | / _` || '__|
//   | |_| || (_| || |
//    \___/  \__,_||_|
//
// ----------------------------------------------------------------------------------------------------

jar {
  exclude 'de/adrodoc55/minecraft/mpl/main/MplCompilerMainLauncher.class'
  manifest {
    attributes(
        'Created-By':               'Adrodoc55 (adrodoc55@googlemail.com)',
        'Specification-Title':      productName,
        'Specification-Version':    version,
        'Implementation-Title':     productName,
        'Implementation-Version':   version,
        'Main-Class':               'de.adrodoc55.minecraft.mpl.main.MplCompilerMain',
        )
  }
}

task standaloneJar(type: Jar) {
  from sourceSets.main.output
  configurations.runtime.each { File file ->
    if(file.isDirectory()) {
      from file
    } else if (file.isFile() && file.name.endsWith('.jar')) {
      from(file) { into '/lib' }
    }
  }
  manifest {
    attributes(
        'Created-By':               'Adrodoc55 (adrodoc55@googlemail.com)',
        'Specification-Title':      productName,
        'Specification-Version':    version,
        'Implementation-Title':     productName,
        'Implementation-Version':   version,
        'Main-Class':               'de.adrodoc55.minecraft.mpl.main.MplCompilerMainLauncher',
        )
  }
  classifier 'standalone'
}
assemble.dependsOn standaloneJar
test.dependsOn standaloneJar // wegen tests des standalone Jars
