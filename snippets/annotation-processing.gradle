sourceSets {
  aptGenerated {
    java.srcDirs = ['.apt_generated']
    resources.srcDirs = []
  }
}

configurations {
  compileOnly.extendsFrom annotationProccessing
  testCompileOnly.extendsFrom compileOnly
}

// ----------------------------------------------------------------------------------------------------
//    _____       _  _
//   | ____| ___ | |(_) _ __   ___   ___
//   |  _|  / __|| || || '_ \ / __| / _ \
//   | |___| (__ | || || |_) |\__ \|  __/
//   |_____|\___||_||_|| .__/ |___/ \___|
//                     |_|
// ----------------------------------------------------------------------------------------------------

eclipse {
  jdt {
    file {
      withProperties { properties ->
        properties << ['org.eclipse.jdt.core.compiler.processAnnotations':'enabled']
      }
    }
  }
  classpath {
    file {
      file('.apt_generated').mkdir()
      whenMerged { cp ->
        def folder = cp.entries.find { it.path == '.apt_generated' }
        folder.entryAttributes << ['ignore_optional_problems': true]
      }
    }
  }
}

task eclipseFactorypath << {
  def writer = new StringWriter()
  def xml = new groovy.xml.MarkupBuilder(writer)
  xml.factorypath {
    configurations.annotationProccessing.each {
      factorypathentry kind: 'EXTJAR', id: it, enabled: "true", runInBatchMode: "false"
    }
  }
  File factorypath = file('.factorypath')
  factorypath.text = writer.toString()
}
tasks.eclipse.dependsOn eclipseFactorypath

task eclipseApt << {
  File jdtAptCorePrefs = file('.settings/org.eclipse.jdt.apt.core.prefs')
  jdtAptCorePrefs.parentFile.mkdir()
  jdtAptCorePrefs.text = """\
eclipse.preferences.version=1
org.eclipse.jdt.apt.aptEnabled=true
org.eclipse.jdt.apt.genSrcDir=.apt_generated
org.eclipse.jdt.apt.reconcileEnabled=true
"""
}
tasks.eclipse.dependsOn eclipseApt
