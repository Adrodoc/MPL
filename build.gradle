ext {
  productName = 'MPL'
  encoding = 'UTF-8'
}
allprojects {
  group = 'de.adrodoc55.mpl'
  version = '0.10'
}

ext {
  libs = [
    antlr4:         'org.antlr:antlr4:4.5',
    antlr4_runtime: 'org.antlr:antlr4-runtime:4.5',
    assertj:        'org.assertj:assertj-core:3.2.0',
    beanfabrics:    'org.beanfabrics:beanfabrics-swing:1.4.0',
    guava:          'com.google.guava:guava:18.0',
    jsr305:         'com.google.code.findbugs:jsr305:1.3.9',
    junit:          'junit:junit:4.12',
    lombok:         'org.projectlombok:lombok:1.16.6',
    nbt:            'com.evilco.mc:nbt:1.0.2',
    pojobuilder:    'net.karneim:pojobuilder:3.4.0',
    spock:          'org.spockframework:spock-core:1.0-groovy-2.4'
  ]
}

apply plugin: 'eclipse'


task wrapper (type: Wrapper) { gradleVersion = 2.13 }

allprojects { Project proj ->
  repositories {
    mavenCentral()
    maven { url "http://basket.cindyscats.com/content/repositories/releases" }
  }

  tasks.withType(JavaCompile) { options.encoding = encoding }

  tasks.withType(Test) {
    beforeTest { TestDescriptor descriptor ->
      logger.lifecycle('Running test: ' + descriptor.name + '(' + descriptor.className + ')')
    }
  }

  pluginManager.withPlugin('java') {
    task sourcesJar(type: Jar) {
      sourceSets.all { from it.allSource }
      includeEmptyDirs = false
      duplicatesStrategy = 'exclude'
      classifier 'sources'
    }
    assemble.dependsOn sourcesJar
  }

  // ----------------------------------------------------------------------------------------------------
  //    _____       _  _
  //   | ____| ___ | |(_) _ __   ___   ___
  //   |  _|  / __|| || || '_ \ / __| / _ \
  //   | |___| (__ | || || |_) |\__ \|  __/
  //   |_____|\___||_||_|| .__/ |___/ \___|
  //                     |_|
  // ----------------------------------------------------------------------------------------------------

  pluginManager.withPlugin('eclipse') {
    tasks.eclipse.dependsOn cleanEclipse
    if (proj != rootProject) {
      eclipse.project.name = rootProject.name + '-' + proj.name
    }

    pluginManager.withPlugin('java') {
      eclipseJdt << {
        logger.lifecycle "[eclipse] Using encoding '${encoding}' for project '${project.path}'"
        File f = file('.settings/org.eclipse.core.resources.prefs')
        f.write('eclipse.preferences.version=1\n')
        f.append('encoding/<project>=' + encoding)
      }

      eclipse {
        classpath {
          file {
            whenMerged { cp ->
              project.logger.lifecycle "[eclipse] Excluding sourceSet outputs from eclipse dependencies for project '${project.path}'"
              cp.entries.grep{ it.kind == 'lib' }.each { entry ->
                rootProject.allprojects { Project project ->
                  String buildDirPath = project.buildDir.path.replace('\\', '/') + '/'
                  String entryPath = entry.path

                  if (entryPath.startsWith(buildDirPath)) {
                    cp.entries.remove entry

                    if (project != proj) {
                      boolean projectContainsProjectDep = false
                      for (Configuration cfg : proj.configurations) {
                        boolean cfgContainsProjectDependency = cfg.allDependencies.withType(ProjectDependency).collect { it.dependencyProject }.contains(project)
                        if(cfgContainsProjectDependency) {
                          projectContainsProjectDep = true
                          break;
                        }
                      }
                      if (!projectContainsProjectDep) {
                        throw new GradleException("The project '${proj.path}' has a dependency to the outputs of project '${project.path}', but not to the project itself. This is not allowed because it will cause compilation in eclipse to behave different than in gradle.")
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
