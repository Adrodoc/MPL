buildscript {
  repositories { jcenter() }

  dependencies { classpath 'com.github.ben-manes:gradle-versions-plugin:0.13.0' }
}
apply plugin: 'com.github.ben-manes.versions'

ext {
  productName = 'MPL'
  encoding = 'UTF-8'
}
allprojects {
  group = 'de.adrodoc55.mpl'
  version = getGitVersion()
}

String getGitVersion() {
  try {
    def stdout = new ByteArrayOutputStream()
    exec {
      commandLine 'git', 'describe', '--dirty=-SNAPSHOT'
      standardOutput = stdout
    }
    return stdout.toString().trim().substring(1)
  } catch (Exception e) {
    return "UNKNOWN-VERSION"
  }
}

boolean isReleaseVersion() {
  version ==~ /\d+\.\d+\.\d+/
}

if (!project.hasProperty('sonatype.username') || !project.hasProperty('sonatype.password')) {
  logger.warn "[warning] sonatype username or password not set"
}

// ----------------------------------------------------------------------------------------------------
//    _      _  _                        _
//   | |    (_)| |__   _ __  __ _  _ __ (_)  ___  ___
//   | |    | || '_ \ | '__|/ _` || '__|| | / _ \/ __|
//   | |___ | || |_) || |  | (_| || |   | ||  __/\__ \
//   |_____||_||_.__/ |_|   \__,_||_|   |_| \___||___/
//
// ----------------------------------------------------------------------------------------------------

ext {
  libs = [
    antlr4:         'org.antlr:antlr4:4.5.3',
    antlr4_runtime: 'org.antlr:antlr4-runtime:4.5.3',
    assertj:        'org.assertj:assertj-core:3.5.2',
    beanfabrics:    'org.beanfabrics:beanfabrics-swing:1.4.3',
    efxclipse:      'at.bestsolution.efxclipse.rt:org.eclipse.fx.code.editor.fx:3.0.0',
    guava:          'com.google.guava:guava:21.0',
    jcommander:     'com.beust:jcommander:1.58',
    jsr305:         'com.google.code.findbugs:jsr305:3.0.1',
    junit:          'junit:junit:4.12',
    lombok:         'org.projectlombok:lombok:1.16.10',
    nbt:            'com.evilco.mc:nbt:1.0.2',
    pojobuilder:    'net.karneim:pojobuilder:3.4.2',
    richtextfx:     'org.fxmisc.richtext:richtextfx:0.8.1',
    spock:          'org.spockframework:spock-core:1.0-groovy-2.4'
  ]
}

// ----------------------------------------------------------------------------------------------------

apply plugin: 'eclipse'

task wrapper (type: Wrapper) { gradleVersion = '2.14' }

allprojects {
  repositories {
    mavenCentral()
    maven { url 'http://basket.cindyscats.com/content/repositories/releases' }
    maven { url 'http://maven.bestsolution.at/efxclipse-releases' }
  }

  pluginManager.withPlugin('eclipse') {
    apply from: rootProject.file('snippets/eclipse/configure-eclipse.gradle')
  }

  tasks.withType(JavaCompile) { options.encoding = encoding }

  tasks.withType(Test) {
    beforeTest { TestDescriptor descriptor ->
      logger.lifecycle('Running test: ' + descriptor.name + '(' + descriptor.className + ')')
    }
  }

  pluginManager.withPlugin('java') {

    // ----------------------------------------------------------------------------------------------------
    //        _
    //       | |  __ _  _ __
    //    _  | | / _` || '__|
    //   | |_| || (_| || |
    //    \___/  \__,_||_|
    //
    // ----------------------------------------------------------------------------------------------------

    artifacts {
      tasks.withType(Jar) { Task task ->
        from rootProject.file('LICENCE.md')
        from rootProject.file('README.md')
        archives task
      }
    }

    // ----------------------------------------------------------------------------------------------------
    //    ____                                             _
    //   / ___|   ___   _   _  _ __  ___  ___  ___        | |  __ _  _ __
    //   \___ \  / _ \ | | | || '__|/ __|/ _ \/ __|    _  | | / _` || '__|
    //    ___) || (_) || |_| || |  | (__|  __/\__ \   | |_| || (_| || |
    //   |____/  \___/  \__,_||_|   \___|\___||___/    \___/  \__,_||_|
    //
    // ----------------------------------------------------------------------------------------------------

    task sourcesJar(type: Jar) {
      sourceSets.all { from it.allSource }
      includeEmptyDirs = false
      duplicatesStrategy = 'exclude'
      classifier 'sources'
    }
    assemble.dependsOn sourcesJar

    // ----------------------------------------------------------------------------------------------------
    //        _                          _                      _
    //       | |  __ _ __   __ __ _   __| |  ___    ___        | |  __ _  _ __
    //    _  | | / _` |\ \ / // _` | / _` | / _ \  / __|    _  | | / _` || '__|
    //   | |_| || (_| | \ V /| (_| || (_| || (_) || (__    | |_| || (_| || |
    //    \___/  \__,_|  \_/  \__,_| \__,_| \___/  \___|    \___/  \__,_||_|
    //
    // ----------------------------------------------------------------------------------------------------

    javadoc {
      options.addStringOption('Xdoclint:all,-syntax', '-quiet')
    }

    task javadocJar(type: Jar) {
      from javadoc
      includeEmptyDirs = false
      duplicatesStrategy = 'exclude'
      classifier = 'javadoc'
    }

    // ----------------------------------------------------------------------------------------------------
    //    ____   _                _
    //   / ___| (_)  __ _  _ __  (_) _ __    __ _
    //   \___ \ | | / _` || '_ \ | || '_ \  / _` |
    //    ___) || || (_| || | | || || | | || (_| |
    //   |____/ |_| \__, ||_| |_||_||_| |_| \__, |
    //              |___/                   |___/
    // ----------------------------------------------------------------------------------------------------

    apply plugin: 'signing'
    signing {
      required { gradle.taskGraph.hasTask(uploadArchives) }
      sign configurations.archives
    }

    // ----------------------------------------------------------------------------------------------------
    //    ____          _      _  _       _
    //   |  _ \  _   _ | |__  | |(_) ___ | |__
    //   | |_) || | | || '_ \ | || |/ __|| '_ \
    //   |  __/ | |_| || |_) || || |\__ \| | | |
    //   |_|     \__,_||_.__/ |_||_||___/|_| |_|
    //
    // ----------------------------------------------------------------------------------------------------

    apply plugin: 'maven'

    gradle.taskGraph.whenReady {
      if (!isReleaseVersion() && gradle.taskGraph.hasTask(uploadArchives)) {
        throw new GradleException("Trying to upload Snapshot Version: ${version}")
      }
    }

    uploadArchives {
      repositories {
        mavenDeployer {
          beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

          // repository(url: "file://localhost/Users/Adrian/.m2/repository")
          repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
            if (project.hasProperty('sonatype.username') && project.hasProperty('sonatype.password')) {
              authentication(userName: project.'sonatype.username', password: project.'sonatype.password')
            }
          }

          pom.project {
            name "Minecraft Programming Language (MPL)"
            description "MPL is a language that makes it easier to write applications for Minecraft 1.9 or higher. The final result of compiling an MPL application are command blocks that can be imported into your world in various ways. MPL comes with it's own editor that supports syntax- and error-highlighting and has a built in compiler."
            url "https://github.com/Adrodoc55/MPL"

            licenses {
              license {
                name "GNU General Public License 3.0"
                url "http://www.gnu.org/licenses/gpl.txt"
              }
            }

            developers {
              developer {
                name "Adrodoc55"
                email "adrodoc55@googlemail.com"
              }
            }

            scm {
              connection "scm:git:git@github.com:Adrodoc55/MPL.git"
              developerConnection "scm:git:git@github.com:Adrodoc55/MPL.git"
              url "git@github.com:Adrodoc55/MPL.git"
            }
          }
        }
      }
    }
  }
}
